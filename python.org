#+TITLE:     Python Notes
#+AUTHOR:    Serkan
#+KEYWORDS: programming, links...
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:1 toc:1 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil email:nil creator:nil timestamp:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="solarized-dark.min.css" />



* BASICS
** prototyping vs planning                                         :software:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
~prototype and patch:~ you start small. Create a prototype that does some basic operations, and later test and patch the error. It's an incremental process. Useful when you don't have a deep understanding of the problem. But it *might cause some unnecessarily complicated code* and it can be *unreliable* too, since it's hard to know if you have found all the errors.

~planned development:~ a high level insight is needed. This makes finding a solution a lot easier.
** garbage collection                                               :garbage:
When an object has no name bound do it, it is scheduled for garbage collection, and in time it may even be deleted from memory. 

** basic immutability                                               :mutable:
strings, numbers and tuples are immutable, and lists and dictionaries -and maybe some others- are mutable.

immutable:
#+BEGIN_SRC python
x = 5
y = x
# y is 5 now.

x = 6
# y is still 5.
#+END_SRC

mutable:
#+BEGIN_SRC python
x = [0, 1, 2]
y = x

x[1]= 9
# y is now [9, 1, 2] as well.

#+END_SRC

** sets                                                          :collection:
sets are unordered. Sets are mutable and frozensets are immutable. They don't allow *duplicates*. Every item must be unique.

** fixed entry point, main                                           :basics:
   :PROPERTIES:
   :Source:   Rapid Gui Programming with Python and Qt, Mark Summerfield
   :END:
Unlike C++ etc, Python programs don't have a fixed entry point. ~main~ is not special.

** functions vs methods                                                 :oop:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
methods are functions that are associated with some class. (just like the methods for strings etc.) They are semantically the same with functions. Although there are some defining differences.

1. methods are defined inside a class definition, which makes the relationship between the class and the method explicit.

2. the syntax for invoking methods is different from calling a function.

* EXCEPTION HANDLING
* FUNCTIONS

** pure functions vs modifiers                                    :functions:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
~modifiers~ change their arguments. (taking a list, or some mutable object, and changing its attributes inside the function.) ~pure~ functions usually create another object to prevent this. Both are okay, but *modifiers are more likely to cause some headache down the road*, and pure functions while longer to write are more straight-forward. 

functional programming relies on ~pure functions.~

** passing arguments into functions                               :functions:
parameters passed into functions in Python are object references, not their values. So an mutable object like a list passed into a function can be changed inside the function. In the case of immutable objects like string etc we can consider the parameter passed as values not object references.

** generator functions                                            :generator:
generator functions return each value as demanded.

#+BEGIN_SRC python
def count_to(n):
    x = 0
    while x <= n:
        yield x
        x += 1

# and we can use it like...
for x in count_to(5):
    print x
#+END_SRC

generator objects has functions like ~next()~ etc.
#+BEGIN_SRC python
x = count_to(5)

print x.next()
# 0

print x.next()
# 1

#+END_SRC

** passing keyword arguments                                      :arguments:
Keyword arguments can be passed. If, while calling the function, not specifically defined the default value is used.

#+BEGIN_SRC python
def greet(name, greeting="Hello"):
    print greeting, name

greet("Joe")
# Hello Joe

greet("Joe", greeting="Ahoy there")
# Ahoy there Joe
#+END_SRC

** simple lambda                                                     :lambda:
Lambda functions can't contain branches or loops. They don't have a return statement. They usually contain simple expressions.

#+BEGIN_SRC python
cube = lambda x: x*x*x

x = cube(3)
# x is now 27
#+END_SRC

** simple list of functions                                           :lists:
   :PROPERTIES:
   :Source:   Rapid Gui Programming with Python and Qt, Mark Summerfield
   :END:
It's possible to create lists of function and iterate them.

#+BEGIN_SRC python
funclist = [funca, funcb, funcc]

for func in funclist:
    func(parameter)
#+END_SRC

** partial function application                               :gui:functions:
   :PROPERTIES:
   :Source:   Rapid Gui Programming with Python and Qt, Mark Summerfield
   :END:
It's used for packaging functions and parameters into a single *callable object*. This callable object is also a function.

#+BEGIN_SRC python
def action(button):
    print "You pressed: ", button

import functools

buttonOneFunc = functools.partial(action, "One")
buttonTwoFunc = functools.partial(action, "Two")

# buttonOneFunc is an object.
buttonOneFunc()
# You pressed: One

#+END_SRC

Why is this *useful*? Everytime we call ~buttonOneFunc()~ it calls ~action("One")~... we can later use ~buttonOneFunc~ for some button function tied into a button.

*Doing it manually.* In case, functools is not supported.
#+BEGIN_SRC python
def partial(func, arg):
    def callme():
        return func(arg)
    return callme # callme, instead of callme() returns a function, not its value.

buttonOneFunc = partial(action, "One")
#+END_SRC

*!* partial functions has methods. (args, func, keywords)
** partial function with extra parameters                     :gui:functions:
   :PROPERTIES:
   :Source:   Rapid Gui Programming with Python and Qt, Mark Summerfield
   :END:
#+BEGIN_SRC python
def multiply(x, y):
    return x*y

doubles = functools.partial(multiply, 2)

doubles()
# ERROR: Missing parameter.

doubles(4)
# 8
# passes 4 -> multiply(2,?)

#+END_SRC
 
* GUI
Mostly PyQt stuff.

** QtCore.QString
This handles strings in PyQt, and return strings in its own way. Python's own str and QString has different functions for string manipulation etc. So it might be a better idea to stick with QString mostly, or convert them into unicode if necessary.

* LISTS

** list comprehension and generators                              :generator:
list comprehension is a quick and easy way to generate lists.

simple list comprehension examples
#+BEGIN_SRC python
[x for x in range(10)]
# 0, 1, 2, 3, ..., 9

[x for x in range(10) if x % 2 == 0]
# 0, 2, 4, 6, 8
#+END_SRC

more complex comprehensions can be written. One drawback is list comprehensions create the whole list in one go. It can be a strain on the resources if the lists have too many elements. In this case, ~xrange()~ can help. Another thing that helps is ~generators~. They create their lists lazily.

a very simple generator.
#+BEGIN_SRC python
x = [x for x in range(5)]
# creates a list.

y = (x for x in range(5))
# creates a generator, which can be iterated:

for num in y:
    print num
# 0 1 2 3 4
#+END_SRC

* LIBRARY

** decimal                                                          :numbers:
~decimal~ can be used when the usual 64bit floating numbers aren't enough, when we need more precision.

#+BEGIN_SRC python
import decimal

x = decimal.Decimal(15.1)
#+END_SRC
* OOP
Creating a new object is called *instantiation* and the object is an *instance* of the class. As in point_a object is an instance of Point() class.

*attributes :* are named elements of objects. ~blank.x~,  ~mydog.name~ and so on.

*embedded object:* is an object that is an attribute of another object. ( a center Point() attribute for a Rectangle() object for example.

Objects are *MUTABLE*. Everything that comes with lists etc is valid for objects. Functions can change values of object attributes.

*copying objects* can be helpful when there are several instances and you end up having to change the object name etc. Instead of going through every single ~blank = Point()~ like instance you just change the first one. [[copying-objects][LINK]] *!!!* check out the details about copying and embedded objects.

** class vs object attributes                                    :attributes:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
don't mix class and object attributes. Class attributes are defined outside methods, and associated with the class rather than instances.

#+BEGIN_SRC python
# NOTICE self.rank vs Card.rank_names

class Card(object):
    """
    represents a standard playing card.
    """

    suit_names = ["Clubs", "Diamonds", "Hearts", "Spades"]
    rank_names = [None, "Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                  "Jack", "Queen", "King"]

    def __init__(self, suit=0, rank=0):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return "%s of %s" % (Card.rank_names[self.rank],
                             Card.suit_names[self.suit])

#+END_SRC

In above example, every card (instance of Card) has rank and suit attributes, while there is only one copy of suit_names and rank_names

** interface and implementation                                   :interface:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
It's a good idea to keep the interface and implementation separate from each other. So that you can change implementation without changing the interface. What this means is you have to hid the attributes. Codes in *other parts* of the program *should use methods to modify and read the state of the object (attr)*. They should not access the attributes directly. This is called information hiding.

** inheritance                                                  :inheritance:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
~inheritance~ is the ability to define a new class that is a modified version of an existing class. The new class inherits the methods of the original one. (parent / child)

#+BEGIN_SRC python
class Child(Parent):
    # stuff comes here.
#+END_SRC 
** defining classes                                                   :class:
Simple way to define classes.

#+BEGIN_SRC python
class Point(object):
    """ class description. """

# Point's defined at top level. So its name is
# __main__.Point
#+END_SRC

** assigning values to an instance object                          :instance:
It can be done with dot notation.

#+BEGIN_SRC python
blank = Point()

blank.x = 2.0
blank.y = 4.0
# here, blank refers to a Point object with x, and y attributes, which in turn point to floating numbers.

#+END_SRC
 
** passing an instance as argument                                 :instance:
can be done as usual.

#+BEGIN_SRC python
p = Point()
p.x = 2.0
p.y = 3.0

def print_coordinates(p):
    print p.x, p.y

#+END_SRC

** returning an instance                                           :function:
functions can return instances.

#+BEGIN_SRC python
def find_center(rect):
    """ finds the center of a Rectangle() object. """
    p = Point()
    p.x = rect.corner.x + rect.width/2.0
    p.y = rect.corner.y + rect.height/2.0

    return p
    # returns p as an OBJECT.
#+END_SRC

** copying objects                                                  :objects:
#+NAME: copying-objects
start with importing copy.

#+BEGIN_SRC python
import copy

p1 = Point()
p2 = copy.copy(p1)
# p2 now is also an instance of Point()

#+END_SRC

copied objects are not the same.
#+BEGIN_SRC python
print p1.x, p1.y
# >>> 2.0, 4.0

print p2.x, p2.y
# >>> 2.0, 4.0

print p1 is p2
# >>> False
# they are not the same object.

print p1 == p2
# >>> False
# and they are not equal.
#+END_SRC

embedded objects are tricky. *deep and shallow copy*
#+BEGIN_SRC python
# let's say that we have a box Rectangle() with a Point() attribute center.
box2 = copy.copy(box)

print box2 is box
# >>> False
# This is expected.

print box2.center is box.center
# >>> True
# Well, this is not...

#+END_SRC

It's because copy does a shallow copy. It copies the object and ANY REFERENCES it contains, but not the EMBEDDED objects. 

So box2.center and box.center point to the same center object. This would cause *errors* if we changed the center of one box. The other box's center would change as well. Fortunately ~copy~ has a *deep copy* feature.

deep copy.

#+BEGIN_SRC python
box3 = copy.deepcopy(box)

print box3 is box
# FALSE

print box3.center is box.center
# FALSE

#+END_SRC

** finding if an object has an attribute                         :attributes:

#+BEGIN_SRC python
p = Point()
p.x = 2.0 

print hasattr(p, "x")
# True

#+END_SRC

** simple methods                                                 :functions:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
methods are simply functions defined inside class definitions.

#+BEGIN_SRC python
class Time(object):
    def print_time(self):
        print self.hour, self.minute, self.second

# the SELF part is important.
time = Time()
# and this is how you call a method.
# also you don't need to do time.print_time(self)
time.print_time()

#+END_SRC

methods often call ~self~ but when using methods outside of classes, we don't use the ~self~ paramater.

** __init__ method                                                  :methods:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
~__init__~ is a special method. 

an example:
#+BEGIN_SRC python
# class Time():
    def __init__(self, hour=0, minute=0, second=0):
        self.hour = hour
        self.minute = minute
        self.second = second 
        # IT'S COMMON FOR INIT ARGUMENTS TO HAVE THE SAME NAMES AS CLASS ATTR.

# EMPTY INIT.
time = Time()
time.print_time()
# 00:00:00

time = Time(9, 12, 45)
time.print_time()
# 09:12:45
# INIT PARAMETERS CAN BE OVERRIDEN.
#+END_SRC 

*DON'T USE* mutable objects as default value in __init__. It causes a bug for each newly created object. Their default value refer to the same mutable object. In general, *be careful when using mutable objects*.

It might be better to use None.
#+BEGIN_SRC python
# INSIDE A CLASS
def __init__(self, contents=None)
    if contents is None:
        contents = []
    self.contents = contents
#+END_SRC
** __str__ method                                                   :methods:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
~__str__~ is another special method. It provides a string representation of an object.

example:
#+BEGIN_SRC python
class Time():
    def __str__(self):
        return "%d:%d:%d" %(self.hour, self.minute, self.second) fs

#+END_SRC 

** __dict__ method                                                  :methods:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
__dict__ is a special method that displays attributes of an object.

#+BEGIN_SRC python
p = Point(3, 4)
print p.__dict__
# {"x" : 3, "y" : 4}

#+END_SRC 
** operator overloading                                             :objects:
   :PROPERTIES:
   :Source:   How to Think Like a Computer Scientist (ThinkPy)
   :END:
operator overloading happens when changing behavior of a operator (+, -, etc)

simple add overloading.
#+BEGIN_SRC python
class Time(object):
    def __add__(self, other):
        seconds = self.time_to_int() + other.time_to_int()
        return int_to_time(seconds)

# start = 09:45:12
# duration = 00:00:18
# both Time() objects.
new_time = start + duration
# this way we change +'s behavior and make it call __add__() method.
#+END_SRC 

For more special names, check out: [[http://docs.python.org/2/reference/datamodel.html#specialnames][LINK]]
* STRINGS
* SYSTEM
** calling simple bash commands                                        :bash:

#+BEGIN_SRC python
# need to import subprocess, shlex
import subprocess
import shlex # for splitting the command into args.

command = "ls -la"
args = shlex.split(command)
subprocess.call(args)
#+END_SRC

** piping stuff                                                        :bash:
This is a bit tricky. For something like ~ls -la | grep text~

#+BEGIN_SRC python
import subprocess

p1 = subprocess.Popen(["ls", "-la"], stdout=subprocess.PIPE)
p2 = subprocess.Popen(["grep", "test"], stdin=p1.stdout)
p1.stdout.close()
p2.communicate() # prints to the screen

# can also use wait()
#+END_SRC
** returning bash output as string                                     :bash:
~check_output()~ is used to return the bash output as string. Unlike call() or Popen() it doesn't print to the screen.
#+BEGIN_SRC python
import subprocess

ps = subprocess.check_output(["ls", "-la"])

print ps
#+END_SRC
